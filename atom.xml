<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chris&#39; Blog</title>
  <subtitle>learning by making</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bensenq.github.io/"/>
  <updated>2017-11-23T14:54:39.012Z</updated>
  <id>http://bensenq.github.io/</id>
  
  <author>
    <name>Chris</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IPMI小记</title>
    <link href="http://bensenq.github.io/2017/11/23/ipmi-note/"/>
    <id>http://bensenq.github.io/2017/11/23/ipmi-note/</id>
    <published>2017-11-22T17:40:05.000Z</published>
    <updated>2017-11-23T14:54:39.012Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IPMI_u7B80_u4ECB"><a href="#IPMI_u7B80_u4ECB" class="headerlink" title="IPMI简介"></a>IPMI简介</h2><p>智能平台管理接口（Intelligent Platform Management Interface）是一个开放的标准，定义了扩平台、跨操作系统监控服务器运行的接口。IPMI卡独立于服务器板主机系统，因此服务器的运行情况不影响监控功能，例如服务器宕机后，可以利用IPMI远程收集信息和重启。在计算机领域这种管理方式通常叫做带外管理<strong>（</strong>Out-of-band management），特指使用独立管理通道进行设备维护。它允许系统管理员远程监控和管理服务器和其他网络设备，无论这些设备是否处于开机状态。</p>
<p>IPMI只定义架构和接口格式，详细实现各厂商没有统一标准。</p>
<h2 id="IPMI_u7ED3_u6784"><a href="#IPMI_u7ED3_u6784" class="headerlink" title="IPMI结构"></a>IPMI结构</h2><p>IPMI的主控叫BMC（baseboard management controller），其他管理控制器叫做卫星控制器（satellite controllers）。BMC是定制的嵌入式控制器，运行管理系统软件；管理控制器与平台的硬件连接，获取温度、电源、风扇转速、操作系统状态等信心。BMC与周边控制器通过IPMB总线连接，IPMB是I2C的增强实现。BMC也可以通过IPMC总线或桥与其他的BMC及其附属控制器连接。<img src="/images\IPMI-Block-Diagram.png" alt="IPMI-Block-Diagram"></p>
<h2 id="Side-band_vs-_out-of-band"><a href="#Side-band_vs-_out-of-band" class="headerlink" title="Side-band vs. out-of-band"></a>Side-band vs. out-of-band</h2><p>IPMI卡在实现上分两种，一种是BMC提供独立的NIC端口，对外提供远程服务，叫做out-of-band方式；另一种方式是BMC通过SMBus连接主机系统的NIC-Phy端口（如上图），与Host OS共享LAN接口，称作Side-band方式。Side-band的优点是可以节省成本较少线缆连接，缺点是带宽受限（因为是SMBus），一般只能支持文本控制台。另外，在Side-band方式下，一旦主机的LAN端口发生硬件故障，IPMI就没办法通过网络对外提供管理服务了。</p>
<p>关于Side-band的实现细节，即BMC和Host OS共享端口的技术细节，可以参考<a href="http://note.heron.me/2012/04/sharing-ipmi-ip-with-host.html" target="_blank" rel="external">这篇文章</a>和<a href="https://serverfault.com/questions/259792/how-does-ipmi-sideband-share-the-ethernet-port-with-the-host" target="_blank" rel="external">这个问答</a>。其核心是NIC端口的多MAC支持功能，可以把端口的这种实现方式理解成一个网络交换机：将一个物理端口和两个虚拟端口桥接。<a href="https://serverfault.com/questions/259792/how-does-ipmi-sideband-share-the-ethernet-port-with-the-host" target="_blank" rel="external">问答</a>里还列出了Side-band方式的更多缺陷，主要是BMC和HOST没有办法保证真正的隔离。</p>
]]></content>
    
    <summary type="html">
    
      IPMI的学习笔记。
    
    </summary>
    
    
      <category term="IPMI" scheme="http://bensenq.github.io/tags/IPMI/"/>
    
      <category term="Server" scheme="http://bensenq.github.io/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>Linux驱动模型Probe解惑</title>
    <link href="http://bensenq.github.io/2017/10/31/%E9%A9%B1%E5%8A%A8%E6%8E%A2%E6%B5%8B%E8%A7%A3%E7%96%91/"/>
    <id>http://bensenq.github.io/2017/10/31/驱动探测解疑/</id>
    <published>2017-10-31T05:42:33.000Z</published>
    <updated>2017-10-31T08:08:21.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u95EE_u9898"><a href="#u95EE_u9898" class="headerlink" title="问题"></a>问题</h2><p>首先来回顾下，Linux设备驱动模型中bus、device和driver三者的关系：</p>
<ul>
<li>bus是物理总线的抽象。</li>
<li>device是设备抽象，存在于bus之上。</li>
<li>driver是驱动抽象，注册到bus上，用于驱动bus上的特定device。</li>
<li>device和driver通过bus提供的match方法来匹配（通常是使用设备ID进行匹配）。</li>
<li>driver匹配到device后，调用driver的probe接口驱动device。</li>
<li>一个driver可以驱动多个相同的设备或者不同的设备。</li>
</ul>
<p>一个driver匹配并驱动多个device的情形比较常见，比如一个igb驱动可以驱动多块intel网卡（可以是相同型号，也可以是不同型号），这是由驱动的id_table和驱动的处理逻辑决定的。那么自然而然的一个问题是：如果系统有多个driver都可以匹配到一个device，系统会怎么处理？换句话说，Linux是否允许两个driver服务同一个device？</p>
<h2 id="u5B9E_u9A8C"><a href="#u5B9E_u9A8C" class="headerlink" title="实验"></a>实验</h2><p>带着这样的疑问，我做了下面这个实验。</p>
<p>首先，查看下系统的PCI设备驱动情况，挑选一个测试对象。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ lspci </span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>.<span class="number">0</span> Host <span class="keyword">bridge: </span>Intel Corporation Skylake Host <span class="keyword">Bridge/DRAM </span>Registers (<span class="keyword">rev </span><span class="number">08</span>)</span><br><span class="line"><span class="number">00</span>:<span class="number">02</span>.<span class="number">0</span> VGA compatible controller: Intel Corporation HD Graphics <span class="number">520</span> (<span class="keyword">rev </span><span class="number">07</span>)</span><br><span class="line"><span class="number">00</span>:<span class="number">14</span>.<span class="number">0</span> USB controller: Intel Corporation Sunrise Point-LP USB <span class="number">3</span>.<span class="number">0</span> xHCI Controller (<span class="keyword">rev </span><span class="number">21</span>)</span><br><span class="line"><span class="number">00</span>:<span class="number">14</span>.<span class="number">2</span> Signal processing controller: Intel Corporation Sunrise Point-LP Thermal <span class="keyword">subsystem </span>(<span class="keyword">rev </span><span class="number">21</span>)</span><br><span class="line"><span class="number">00</span>:<span class="number">16</span>.<span class="number">0</span> Communication controller: Intel Corporation Sunrise Point-LP CSME HECI <span class="number">#1</span> (<span class="keyword">rev </span><span class="number">21</span>)</span><br><span class="line"><span class="number">00</span>:<span class="number">17</span>.<span class="number">0</span> SATA controller: Intel Corporation Sunrise Point-LP SATA Controller [AHCI mode] (<span class="keyword">rev </span><span class="number">21</span>)</span><br><span class="line"><span class="number">00</span>:<span class="number">1</span>c.<span class="number">0</span> PCI <span class="keyword">bridge: </span>Intel Corporation Sunrise Point-LP PCI Express Root Port (<span class="keyword">rev </span><span class="literal">f1</span>)</span><br><span class="line"><span class="number">00</span>:<span class="number">1</span>c.<span class="number">2</span> PCI <span class="keyword">bridge: </span>Intel Corporation Sunrise Point-LP PCI Express Root Port (<span class="keyword">rev </span><span class="literal">f1</span>)</span><br><span class="line"><span class="number">00</span>:<span class="number">1</span>f.<span class="number">0</span> ISA <span class="keyword">bridge: </span>Intel Corporation Sunrise Point-LP LPC Controller (<span class="keyword">rev </span><span class="number">21</span>)</span><br><span class="line"><span class="number">00</span>:<span class="number">1</span>f.<span class="number">2</span> Memory controller: Intel Corporation Sunrise Point-LP PMC (<span class="keyword">rev </span><span class="number">21</span>)</span><br><span class="line"><span class="number">00</span>:<span class="number">1</span>f.<span class="number">3</span> Audio device: Intel Corporation Sunrise Point-LP HD Audio (<span class="keyword">rev </span><span class="number">21</span>)</span><br><span class="line"><span class="number">00</span>:<span class="number">1</span>f.<span class="number">4</span> SMBus: Intel Corporation Sunrise Point-LP SMBus (<span class="keyword">rev </span><span class="number">21</span>)</span><br><span class="line"><span class="number">00</span>:<span class="number">1</span>f.<span class="number">6</span> Ethernet controller: Intel Corporation Ethernet Connection I219-V (<span class="keyword">rev </span><span class="number">21</span>)</span><br><span class="line"><span class="number">02</span>:<span class="number">00</span>.<span class="number">0</span> Unassigned class [ff00]: Realtek Semiconductor Co., Ltd. RTS522A PCI Express Card Reader (<span class="keyword">rev </span><span class="number">01</span>)</span><br><span class="line"><span class="number">04</span>:<span class="number">00</span>.<span class="number">0</span> Network controller: Intel Corporation Wireless <span class="number">8260</span> (<span class="keyword">rev </span><span class="number">3</span>a)</span><br></pre></td></tr></table></figure>
<p>可以看到<code>00:1f.6</code>设备是一块Intel网卡，我们就拿它试验。看看它的驱动情况：<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ lspci -v</span><br><span class="line"><span class="number">00</span>:<span class="number">1</span>f.<span class="number">6</span> Ethernet controller: Intel Corporation Ethernet Connection I219-V (rev <span class="number">21</span>)</span><br><span class="line">        Subsystem: Lenovo Ethernet Connection I219-V</span><br><span class="line">        Flags: <span class="keyword">bus</span> master, fast devsel, latency <span class="number">0</span>, IRQ <span class="number">128</span></span><br><span class="line">        Memory at f1200000 (<span class="number">32</span>-<span class="typename">bit</span>, non-prefetchable) [size=<span class="number">128</span>K]</span><br><span class="line">        Capabilities: &lt;<span class="keyword">access</span> denied&gt;</span><br><span class="line">        Kernel driver <span class="keyword">in</span> <span class="keyword">use</span>: e1000e</span><br><span class="line">        Kernel modules: e1000e</span><br></pre></td></tr></table></figure></p>
<p>可以看到当前正在使用的驱动是<code>e1000e</code>模块。</p>
<p>然后，构造一个可以匹配选中网卡的PCI设备驱动，观察驱动加载时系统的行为。</p>
<p>代码直接从ldd3的pci_skel样例修改，只需要把id_table修改成目标网卡的vendor id和device id即可。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;linux/pci.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> pci_device_id ids[] = &#123;</span><br><span class="line">	&#123; PCI_DEVICE(<span class="number">0x8086</span>, <span class="number">0x1570</span>), &#125;,</span><br><span class="line">	&#123; <span class="number">0</span>, &#125;</span><br><span class="line">&#125;;</span><br><span class="line">MODULE_DEVICE_TABLE(pci, ids);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">skel_get_revision</span><span class="params">(<span class="keyword">struct</span> pci_dev *dev)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	u8 revision;</span><br><span class="line"></span><br><span class="line">	pci_read_config_byte(dev, PCI_REVISION_ID, &amp;revision);</span><br><span class="line">	<span class="keyword">return</span> revision;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">probe</span><span class="params">(<span class="keyword">struct</span> pci_dev *dev, <span class="keyword">const</span> <span class="keyword">struct</span> pci_device_id *id)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="comment">/* Do probing type stuff here.  </span><br><span class="line">	 * Like calling request_region();</span><br><span class="line">	 */</span></span><br><span class="line">	printk(<span class="string">"pci_e1000e probing\n"</span>);</span><br><span class="line">	pci_enable_device(dev);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (skel_get_revision(dev) == <span class="number">0x42</span>)</span><br><span class="line">		<span class="keyword">return</span> -ENODEV;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">struct</span> pci_dev *dev)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="comment">/* clean up any allocated resources and stuff here.</span><br><span class="line">	 * like call release_region();</span><br><span class="line">	 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> pci_driver pci_driver = &#123;</span><br><span class="line">	.name = <span class="string">"pci_e1000e"</span>,</span><br><span class="line">	.id_table = ids,</span><br><span class="line">	.probe = probe,</span><br><span class="line">	.remove = remove,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">pci_skel_init</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	printk(<span class="string">"%s:%d\n"</span>, __func__, __LINE__);</span><br><span class="line">	<span class="keyword">return</span> pci_register_driver(&amp;pci_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __<span class="function"><span class="built_in">exit</span> <span class="title">pci_skel_exit</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	pci_unregister_driver(&amp;pci_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</span><br><span class="line"></span><br><span class="line">module_init(pci_skel_init);</span><br><span class="line">module_exit(pci_skel_exit);</span><br></pre></td></tr></table></figure>
<p>Makefile如下：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">obj-m   := pci_e1000e.o</span><br><span class="line"></span><br><span class="line"><span class="constant">KERNELDIR</span> ?= /lib/modules/<span class="variable">$(shell uname -r)</span>/build</span><br><span class="line"><span class="constant">PWD</span>       := <span class="variable">$(shell pwd)</span></span><br><span class="line"></span><br><span class="line"><span class="title">all:</span></span><br><span class="line">        $(MAKE) -C $(KERNELDIR) M=$(PWD)</span><br><span class="line"></span><br><span class="line"><span class="title">clean:</span></span><br><span class="line">        rm -rf *.o *~ core .depend .*.cmd *.ko *.mod.c .tmp_versions</span><br></pre></td></tr></table></figure>
<p>我在init和probe接口中增加了打印，跟踪流程。</p>
<p>直接make生成pci_e1000e.ko模块，加载测试。</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>make</span><br><span class="line"><span class="variable">$ </span>sudo insmod pci_e1000e.ko</span><br></pre></td></tr></table></figure>
<p>dmesg查看驱动加载情况，发现内核只新增了一行打印：</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">pci_skel_init:</span><span class="number">52</span></span><br></pre></td></tr></table></figure>
<p>说明驱动成功加载，但是压根没有进入probe接口。由此看来，内核应该不会让一个device同时被两个driver匹配上。</p>
<h2 id="u5206_u6790"><a href="#u5206_u6790" class="headerlink" title="分析"></a>分析</h2><p>直接从源码分析，可以看到设备驱动加载后，<code>pci_register_driver</code>调用流程大致如下：</p>
<p><img src="/images/driver_attatch.svg" alt=""></p>
<p>其核心代码是<code>driver_attatch</code>，其作用是driver binding，它调用<code>bus_for_each_dev</code>来遍历总线上的所有设备，然后对每一个设备调用<code>__driver_attach</code>函数。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">driver_attach</span><span class="params">(<span class="keyword">struct</span> device_driver *drv)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bus_for_each_dev(drv-&gt;bus, <span class="literal">NULL</span>, drv, __driver_attach);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们想要的答案就在<code>__driver_attach</code>函数的实现里：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __driver_attach(<span class="keyword">struct</span> device *dev, <span class="keyword">void</span> *data)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> device_driver *drv = data;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">    ret = driver_match_device(drv, dev);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* no match */</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret == -EPROBE_DEFER) &#123;</span><br><span class="line">            dev_dbg(dev, <span class="string">"Device match requests probe deferral\n"</span>);</span><br><span class="line">            driver_deferred_probe_add(dev);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            dev_dbg(dev, <span class="string">"Bus failed to match device: %d"</span>, ret);</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">                    &#125; <span class="comment">/* ret &gt; 0 means positive match */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dev-&gt;parent)        <span class="comment">/* Needed for USB */</span></span><br><span class="line">                device_lock(dev-&gt;parent);</span><br><span class="line">        device_lock(dev);</span><br><span class="line">        <span class="keyword">if</span> (!dev-&gt;driver)</span><br><span class="line">                driver_probe_device(drv, dev);</span><br><span class="line">        device_unlock(dev);</span><br><span class="line">        <span class="keyword">if</span> (dev-&gt;parent)</span><br><span class="line">                device_unlock(dev-&gt;parent);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，在<code>driver_match_device</code>匹配成功以后，并不是直接进行probe的，而是先要判断<code>dev-&gt;driver</code>是否为空，如果不为空就不进行<code>driver_probe_device</code>了。也就是说，如果一个device已经绑定了一个driver，就不允许尝试绑定第二个driver了。</p>
]]></content>
    
    <summary type="html">
    
      如果系统有多个driver都可以匹配到一个device，系统会怎么处理?
    
    </summary>
    
    
      <category term="Driver" scheme="http://bensenq.github.io/tags/Driver/"/>
    
  </entry>
  
  <entry>
    <title>IRQ Balance</title>
    <link href="http://bensenq.github.io/2017/02/05/irq-balance/"/>
    <id>http://bensenq.github.io/2017/02/05/irq-balance/</id>
    <published>2017-02-05T11:36:47.000Z</published>
    <updated>2017-10-13T06:42:29.644Z</updated>
    
    <content type="html"><![CDATA[<p>关于Linux的中断的balance，<a href="https://we.riseup.net/riseup+tech/balancing-hardware-interrupts" target="_blank" rel="external">这篇文章</a>写的很好，可以学习一下。看完后我的理解是这样的:</p>
<ol>
<li>多核情况下，为了发挥并发优势，希望中断能分发到不同的核上并发处理，但是需要注意，数据在不同CPU的Cache上来回的迁移是很耗性能的，因此Linux的默认行为也是将某一中断绑定到一个核，而不是在多个核上轮播。</li>
<li>但是一般中断处理代码都比较短，Cache的数据量不大，因此如果能自动在多个CPU上轮播中断是有可能提升性能的。但是问题又来了，网卡的收发包过程中有TCP连接状态的缓存，是非常适合Cache进行缓存的，因此在这种情况下轮播中断变得不可取，因为会导致严重的Cache数据颠簸，性能大大下降。</li>
<li>为了解决这个问题，现代的网卡都是采用PCI MSIX中断，也就是单设备多中断，可以为每个硬件收发队列分配一个中断，然后把每个中断绑定到不同的核上，这样基本上就解决了上面的问题，即能多核并发，又能兼顾收发包的局部性缓存带来的性能收益（网卡驱动会根据IP地址的hash放到对应的队列。）</li>
<li>最后一点，服务器设备比较多，有可能发生高速设备的中断数大于CPU核数，那么就会有一个核处理2个以上中断的情况发上，而这个基本上是没办法提前预知的（和CPU架构、核数、设备拓扑等相关），所以只能通过/proc/irq接口来手动调节。有个用户程序叫irqbalance可以自动做中断均衡，而且据说新版本评价不错，我自己没试过，但我认为要想获取最佳性能还得手动设置affinity。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      中断均衡学习备忘。
    
    </summary>
    
    
      <category term="IRQ" scheme="http://bensenq.github.io/tags/IRQ/"/>
    
      <category term="Perf" scheme="http://bensenq.github.io/tags/Perf/"/>
    
  </entry>
  
  <entry>
    <title>Docker初试</title>
    <link href="http://bensenq.github.io/2017/01/02/Docker%E5%88%9D%E8%AF%95/"/>
    <id>http://bensenq.github.io/2017/01/02/Docker初试/</id>
    <published>2017-01-01T16:47:29.000Z</published>
    <updated>2017-10-13T06:45:30.165Z</updated>
    
    <content type="html"><![CDATA[<p>要了解一样东西，最简单的入门方法无非是去使用它，跟它交互，一步步填补概念和纠正已有认知。从今天开始踏上Docker之路！</p>
<h2 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h2><p>ubuntu 16.04上的安装还是比较方便的，根据<a href="https://docs.docker.com/engine/installation/linux/ubuntulinux/" target="_blank" rel="external">官方文档</a>，添加APT源，然后直接<code>apt-get install docker-engine</code>就ok了。具体命令如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get <span class="operator"><span class="keyword">update</span></span><br><span class="line">$ sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> apt-transport-https ca-certificates</span><br><span class="line">$ sudo apt-<span class="keyword">key</span> adv \</span><br><span class="line">               <span class="comment">--keyserver hkp://ha.pool.sks-keyservers.net:80 \</span></span><br><span class="line">               <span class="comment">--recv-keys 58118E89F3A912897C070ADBF76221572C52609D</span></span><br><span class="line">$ echo <span class="string">"deb https://apt.dockerproject.org/repo ubuntu-xenial main"</span> | sudo tee /etc/apt/sources.<span class="keyword">list</span>.<span class="keyword">d</span>/docker.<span class="keyword">list</span></span><br><span class="line">$ sudo apt-<span class="keyword">get</span> <span class="keyword">update</span></span><br><span class="line">$ sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> linux-image-extra-$(uname -r) linux-image-extra-<span class="keyword">virtual</span></span><br><span class="line">$ sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> docker-<span class="keyword">engine</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="u5C0F_u8BD5"><a href="#u5C0F_u8BD5" class="headerlink" title="小试"></a>小试</h2><h3 id="u5F00_u542Fdocker_u670D_u52A1"><a href="#u5F00_u542Fdocker_u670D_u52A1" class="headerlink" title="开启docker服务"></a>开启docker服务</h3><p>docker daemon负责接收docker工具发过来的命令，然后做相应的操作，因此首先要开启它：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service docker <span class="literal">start</span></span><br></pre></td></tr></table></figure></p>
<h3 id="hello_world"><a href="#hello_world" class="headerlink" title="hello world"></a>hello world</h3><p>docker提供了一个最基本的hello world镜像，用来验证docker安装是否就绪。利用docker命令运行它：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker <span class="command">run</span> hello-world</span><br></pre></td></tr></table></figure></p>
<p>如果正常一切正常，应该有如下输出：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Hello <span class="built_in">from</span> Docker!</span><br><span class="line">This message shows that your installation appears <span class="built_in">to</span> be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took <span class="operator">the</span> following steps:</span><br><span class="line"> <span class="number">1.</span> The Docker client contacted <span class="operator">the</span> Docker daemon.</span><br><span class="line"> <span class="number">2.</span> The Docker daemon pulled <span class="operator">the</span> <span class="string">"hello-world"</span> image <span class="built_in">from</span> <span class="operator">the</span> Docker Hub.</span><br><span class="line"> <span class="number">3.</span> The Docker daemon created <span class="operator">a</span> <span class="built_in">new</span> container <span class="built_in">from</span> that image which runs <span class="operator">the</span></span><br><span class="line">    executable that produces <span class="operator">the</span> output you are currently reading.</span><br><span class="line"> <span class="number">4.</span> The Docker daemon streamed that output <span class="built_in">to</span> <span class="operator">the</span> Docker client, which sent <span class="keyword">it</span></span><br><span class="line">    <span class="built_in">to</span> your terminal.</span><br><span class="line"></span><br><span class="line">To <span class="keyword">try</span> something more ambitious, you can run <span class="operator">an</span> Ubuntu container <span class="operator">with</span>:</span><br><span class="line"> $ docker run -<span class="keyword">it</span> ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, <span class="operator">and</span> more <span class="operator">with</span> <span class="operator">a</span> free Docker Hub account:</span><br><span class="line"> <span class="keyword">https</span>://hub.docker.com</span><br><span class="line"></span><br><span class="line">For more examples <span class="operator">and</span> ideas, visit:</span><br><span class="line"> <span class="keyword">https</span>://docs.docker.com/engine/userguide/</span><br></pre></td></tr></table></figure></p>
<p>可以看到，docker为了运行<code>hello world</code>例程，经过了一下几个步骤：</p>
<ol>
<li>Docker客户端（也就是Docker命令）连接Docker Daemon</li>
<li>Docker Daemon从Docker Hub（也就是Docker应用仓库）中下载<code>hello-world</code>镜像</li>
<li>Docker Daemon根据<code>hello-world</code>镜像建立一个Container实例，该实例会运行可执行文件并输出上述打印</li>
<li>Docker Daemon把输出定向给Docker客户端，显示在终端</li>
</ol>
<h2 id="u6DF1_u5165_u4E00_u70B9"><a href="#u6DF1_u5165_u4E00_u70B9" class="headerlink" title="深入一点"></a>深入一点</h2><p><code>hello-world</code>生命周期很短，输出消息后就退出了，看不到太多东东。根据上面的提示，我们可以在容器里运行个ubuntu镜像玩玩：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="command">run</span> -<span class="keyword">it</span> ubuntu bash</span><br></pre></td></tr></table></figure></p>
<p>其中<code>-it</code>是用来生成交互的伪终端与Container交互，<code>ubuntu</code>是镜像名。和<code>hello-world</code>例子不一样，这个例子多了参数<code>bash</code>，这是用来指明要在Docker中运行的进程，因此上面命令的意思是说，给我创建一个ubuntu容器，并运行bash shell。</p>
<p>如果不加结尾的bash，我们发现效果与<code>bash</code>相同，也就是说缺省情况下ubuntu镜像就会启动一个bash命令行.</p>
<p>把bash改成我们想要的命令，就可以在容器中运行它。换成<code>ls</code>试试：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="variable">$ </span>docker run -it ubuntu ls</span><br><span class="line">bin   dev  home  lib64	mnt  proc  run	 srv  tmp  var</span><br><span class="line">boot  etc  <span class="class"><span class="keyword">lib</span>	 <span class="title">media</span>	<span class="title">opt</span>  <span class="title">root</span>  <span class="title">sbin</span>  <span class="title">sys</span>  <span class="title">usr</span></span></span><br></pre></td></tr></table></figure></p>
<p>还可以给命令加参数：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -it ubuntu ls -lrt</span><br><span class="line">total <span class="number">64</span></span><br><span class="line">drwxr-xr-x   <span class="number">8</span> root root <span class="number">4096</span> Sep <span class="number">13</span>  <span class="number">2015</span> lib</span><br><span class="line">drwxr-xr-x   <span class="number">2</span> root root <span class="number">4096</span> Apr <span class="number">12</span>  <span class="number">2016</span> home</span><br><span class="line">drwxr-xr-x   <span class="number">2</span> root root <span class="number">4096</span> Apr <span class="number">12</span>  <span class="number">2016</span> boot</span><br><span class="line">drwxr-xr-x   <span class="number">2</span> root root <span class="number">4096</span> Dec <span class="number">13</span> <span class="number">20</span>:<span class="number">23</span> srv</span><br><span class="line">drwxr-xr-x   <span class="number">2</span> root root <span class="number">4096</span> Dec <span class="number">13</span> <span class="number">20</span>:<span class="number">23</span> opt</span><br><span class="line">drwxr-xr-x   <span class="number">2</span> root root <span class="number">4096</span> Dec <span class="number">13</span> <span class="number">20</span>:<span class="number">23</span> mnt</span><br><span class="line">drwxr-xr-x   <span class="number">2</span> root root <span class="number">4096</span> Dec <span class="number">13</span> <span class="number">20</span>:<span class="number">23</span> media</span><br><span class="line">drwxr-xr-x   <span class="number">2</span> root root <span class="number">4096</span> Dec <span class="number">13</span> <span class="number">20</span>:<span class="number">24</span> lib64</span><br><span class="line">drwx------   <span class="number">2</span> root root <span class="number">4096</span> Dec <span class="number">13</span> <span class="number">20</span>:<span class="number">24</span> root</span><br><span class="line">drwxr-xr-x   <span class="number">2</span> root root <span class="number">4096</span> Dec <span class="number">13</span> <span class="number">20</span>:<span class="number">24</span> bin</span><br><span class="line">drwxrwxrwt   <span class="number">2</span> root root <span class="number">4096</span> Dec <span class="number">13</span> <span class="number">20</span>:<span class="number">24</span> tmp</span><br><span class="line">drwxr-xr-x  <span class="number">11</span> root root <span class="number">4096</span> Dec <span class="number">15</span> <span class="number">17</span>:<span class="number">45</span> usr</span><br><span class="line">drwxr-xr-x   <span class="number">2</span> root root <span class="number">4096</span> Dec <span class="number">15</span> <span class="number">17</span>:<span class="number">45</span> sbin</span><br><span class="line">drwxr-xr-x  <span class="number">13</span> root root <span class="number">4096</span> Dec <span class="number">15</span> <span class="number">17</span>:<span class="number">45</span> var</span><br><span class="line">drwxr-xr-x   <span class="number">6</span> root root <span class="number">4096</span> Dec <span class="number">15</span> <span class="number">17</span>:<span class="number">45</span> run</span><br><span class="line">dr-xr-xr-x  <span class="number">13</span> root root    <span class="number">0</span> Dec <span class="number">28</span> <span class="number">17</span>:<span class="number">01</span> sys</span><br><span class="line">drwxr-xr-x  <span class="number">45</span> root root <span class="number">4096</span> Dec <span class="number">28</span> <span class="number">17</span>:<span class="number">35</span> etc</span><br><span class="line">dr-xr-xr-x <span class="number">221</span> root root    <span class="number">0</span> Dec <span class="number">28</span> <span class="number">17</span>:<span class="number">35</span> proc</span><br><span class="line">drwxr-xr-x   <span class="number">5</span> root root  <span class="number">380</span> Dec <span class="number">28</span> <span class="number">17</span>:<span class="number">35</span> dev</span><br></pre></td></tr></table></figure></p>
<p>docker的容器本质上是提供了一个与主机环境隔离的执行环境，普通Linux上的1号进程是特殊的init，而容器环境下的1号进程就是启动容器时指定的应用。譬如，用ps命令试试看：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run ubuntu:latest ps</span><br><span class="line">  PID TTY          TIME CMD</span><br><span class="line">    <span class="number">1</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> ps</span><br></pre></td></tr></table></figure></p>
<p>可以看到，ps命令在容器里的PID就是1。<br>当然除了rootfs不同、进程PID编号不同，容器还在进程间通信、用户、文件系统挂载点、主机名称及物理资源（CPU、MEM、网络）等方面进行隔离和限制，后面逐步探索。</p>
]]></content>
    
    <summary type="html">
    
      Docker值得折腾，通过Docker可以了解系统运行环境隔离的相关知识。
    
    </summary>
    
    
      <category term="Docker" scheme="http://bensenq.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>readl和raw_readl语义区别</title>
    <link href="http://bensenq.github.io/2016/08/27/raw_readl/"/>
    <id>http://bensenq.github.io/2016/08/27/raw_readl/</id>
    <published>2016-08-27T09:25:42.000Z</published>
    <updated>2017-10-13T06:51:52.241Z</updated>
    
    <content type="html"><![CDATA[<p>进行Linux驱动方面开发的程序员，经常需要使用<code>readl</code>/<code>writel</code>系列函数对Memory-Mapped IO进行读写。那么<code>readl</code>/<code>__readl</code>/<code>raw_readl</code>/<code>__raw_readl</code>几个函数的具体语义有何差别呢？</p>
<p>内核中关于这几个函数的说明非常有限，根据stackoverflow上的<a href="http://stackoverflow.com/questions/9818657/whats-the-difference-b-w-raw-readl-raw-writel-and-readl-writel-in-linux-ker" target="_blank" rel="external">这个问答</a>，我们可以总结为：</p>
<ol>
<li><p>raw前缀只与byteorder相关，即<code>readl</code>/<code>writel</code>是linux默认的小端操作，而<code>raw_readl</code>/<code>raw_writel</code>是native访问。也就是说：如果是小端系统，<code>raw_readl</code>与<code>readl</code>相同，如果是大端系统，<code>raw_readl</code>与<code>readl</code>的有字节序差别。</p>
</li>
<li><p>双下划线前缀与指令保序相关，即<code>readl</code>/<code>writel</code>包含存储器栅栏指令<code>mb</code>，能够保证IO读写顺序，而<code>__readl</code>/<code>__writel</code>则不能保证。</p>
</li>
</ol>
<p>另外，有的体系结构还会定义<code>readl_relaxed</code>/<code>writel_relaxed</code>接口，其含义应该与<code>__readl</code>/<code>__writel</code>相同，表示小端、不带存储器栅栏的读写。</p>
]]></content>
    
    <summary type="html">
    
      语义即契约，只有了解语义才能正确使用。
    
    </summary>
    
    
      <category term="Kernel" scheme="http://bensenq.github.io/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>GNU三元操作符扩展</title>
    <link href="http://bensenq.github.io/2016/03/03/GNU%E4%B8%89%E5%85%83%E6%93%8D%E4%BD%9C%E7%AC%A6%E6%89%A9%E5%B1%95/"/>
    <id>http://bensenq.github.io/2016/03/03/GNU三元操作符扩展/</id>
    <published>2016-03-03T14:12:29.000Z</published>
    <updated>2017-10-13T06:49:40.049Z</updated>
    
    <content type="html"><![CDATA[<p>Linux内核随处可见到关于三元操作符？:的这种使用方法：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdev-&gt;map_name = map_name ?: RC_MAP_EMPTY<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>这是GNU C的关于标准C三元操作符?:的一个扩展，用来省略条件表达式的中间参数。也就是说，<br><code>x ? : y</code> 与 <code>x ？ x : y</code>完全等价。</p>
<p>所有GNU扩展都在GCC手册的<a href="https://gcc.gnu.org/onlinedocs/gcc-5.3.0/gcc/C-Extensions.html#C-Extensions" target="_blank" rel="external">Extensions to the C Language Family</a>章节有详细描述。要注意，这些写法仅适合GCC编译器，如果要编写可移植的代码，那么就要格外小心。</p>
]]></content>
    
    <summary type="html">
    
      一种很少见GCC语法。
    
    </summary>
    
    
      <category term="C" scheme="http://bensenq.github.io/tags/C/"/>
    
      <category term="GNU" scheme="http://bensenq.github.io/tags/GNU/"/>
    
  </entry>
  
</feed>

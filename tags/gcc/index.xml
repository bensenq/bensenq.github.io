<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GCC on Chris&#39; Blog</title>
    <link>https://sukihiro.cn/tags/gcc/</link>
    <description>Recent content in GCC on Chris&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>chris</copyright>
    <lastBuildDate>Sun, 20 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://sukihiro.cn/tags/gcc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一个C语言未定义行为的反思</title>
      <link>https://sukihiro.cn/2022/03/20/return-local-addr/</link>
      <pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sukihiro.cn/2022/03/20/return-local-addr/</guid>
      <description>作为一个C语言15年+的老玩家，今天载了个跟头，记录反思之。
一切源自于一个bug，如下：
#include &amp;lt;stdio.h&amp;gt; int *func() { int p[10]; return &amp;amp;p[2]; } int main() { int * tmp = func(); printf(&amp;#34;%p\n&amp;#34;, tmp); return 0; } 编译的时候，编译器（gcc）报了个警告： warning: function returns address of local variable。没错，func函数返回了一个局部变量的地址，这是很明显的错误：数组p[]是在栈上分配的，从func返回后，局部变量就消亡了，所以在函数外引用一个局部变量时没有意义。
但关键问题是，main函数里能拿到tmp能拿到这个不应该返回的局部变量地址吗？或者说，尽管无意义，但是func是否可以把这个局部变量的地址返回给调用者（caller）吗？
C语言最大的魅力就在于灵活高效，其精髓就在于指针，但指针是把双刃剑。在遇到这个问题前，我认为caller是可以拿到栈上的这个地址的，也是基于C语言给我的这个印象。我想：虽然这样做是无意义或者危险的，但是C语言并不会阻止我们拿到一个局部变量的地址，毕竟那个局部变量曾经确实存在于一个确定的栈地址！而且拿到这个栈地址跟访问或使用这个内存地址并不是一回事儿！
结果出乎我的意料。caller确实拿到了func的返回值（程序没有报错），但是拿到的却不是&amp;amp;p[2]的地址，而是0。(看到这个结果时，脑子里是OMG，Why？)
全网搜索，大家都在讨论这个warning的原因，但是没有人讨论gcc为什么会给caller一个0。看来只能从C语言标准和编译器实现入手了。用gcc和return local variable address进行关键字搜索，总算有了一个明确的方向：这是一个未定义的行为（undefined behavior）。也就是说C语言没有对这种行为的后果做任何约束，编译器想怎么实现都可以！而gcc遇到这种情况就会给caller返回一个0。
我们来看看以上例子的反汇编：
struct possibleSet *func() {1149: f3 0f 1e fa endbr64114d: 55 push %rbp114e: 48 89 e5 mov %rsp,%rbp1151: 48 81 ec b0 00 00 00 sub $0xb0,%rsp1158: 64 48 8b 04 25 28 00 mov %fs:0x28,%rax115f: 00 001161: 48 89 45 f8 mov %rax,-0x8(%rbp)1165: 31 c0 xor %eax,%eaxstruct possibleSet p[10];return &amp;amp;p[0];1167: b8 00 00 00 00 mov $0x0,%eax}116c: 48 8b 55 f8 mov -0x8(%rbp),%rdx1170: 64 48 33 14 25 28 00 xor %fs:0x28,%rdx1177: 00 001179: 74 05 je 1180 &amp;lt;func+0x37&amp;gt;117b: e8 d0 fe ff ff callq 1050 &amp;lt;__stack_chk_fail@plt&amp;gt;1180: c9 leaveq1181: c3 retq 这里可以看到1167地址处mov $0x0,%eax，返回值（eax寄存器）被赋了零。如果对例子稍作修改，将局部变量修改为静态变量，那么反汇编里就没有类似的处理了（具体实验代码略）。</description>
    </item>
    
  </channel>
</rss>
